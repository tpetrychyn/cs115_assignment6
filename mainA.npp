//
//  MainA.cpp
//
//  A module to test the Vector2Int class.
//
//  This file is required for Part A of Assignment 6.  Do not
//    modify this file.
//

// standard #includes
#include <iostream>
#include <iomanip>

// custom #includes
#include "Vector2Int.h"

// using declarations
using namespace std;

// function prototypes
ostream& operator<< (ostream& out, const Vector2Int& vec);



int main ()
{
    // 1. Test constructors
    
    Vector2Int v1;
    Vector2Int v2(1, 2);
    Vector2Int v3(v2);
    
    cout << "After initialization:" << endl;
    cout << "  v1: " << v1 << endl;
    cout << "  v2: " << v2 << endl;
    cout << "  v3: " << v3 << endl;
    
    // 2. Test assignment operators
    
    v3 = v1;
    v1 = v2;
    v1.x = 0;
    
    cout << "After assignments:" << endl;
    cout << "  v1: " << v1 << endl;
    cout << "  v2: " << v2 << endl;
    cout << "  v3: " << v3 << endl;
    
    // 3. Test equality test operator
    
    cout << "Testing equality test operator:" << endl;
    cout << boolalpha;
    cout << "  v1 == v1: " << (v1 == v1) << endl;
    cout << "  v1 == v2: " << (v1 == v2) << endl;
    cout << "  v1 == v3: " << (v1 == v3) << endl;
    cout << "  v2 == v1: " << (v2 == v1) << endl;
    cout << "  v2 == v2: " << (v2 == v2) << endl;
    cout << "  v2 == v3: " << (v2 == v3) << endl;
    cout << "  v3 == v1: " << (v3 == v1) << endl;
    cout << "  v3 == v2: " << (v3 == v2) << endl;
    cout << "  v3 == v3: " << (v3 == v3) << endl;
    
    // 4. Test assigning components
    
    v1.x = 4;
    v1.y = 6;
    
    cout << "After setting v1:" << endl;
    cout << "  v1: " << v1 << endl;
    cout << "  v2: " << v2 << endl;
    cout << "  v3: " << v3 << endl;
    
    // 5. Test addition operator
    
    cout << "Testing addition:" << endl;
    cout << "  v1 + v1: " << (v1 + v1) << endl;
    cout << "  v1 + v2: " << (v1 + v2) << endl;
    cout << "  v1 + v3: " << (v1 + v3) << endl;
    cout << "  v2 + v1: " << (v2 + v1) << endl;
    cout << "  v2 + v2: " << (v2 + v2) << endl;
    cout << "  v2 + v3: " << (v2 + v3) << endl;
    cout << "  v3 + v1: " << (v3 + v1) << endl;
    cout << "  v3 + v2: " << (v3 + v2) << endl;
    cout << "  v3 + v3: " << (v3 + v3) << endl;
    
    // 6. Test subtraction operator
    
    cout << "Testing subtraction:" << endl;
    cout << "  v1 - v1: " << (v1 - v1) << endl;
    cout << "  v1 - v2: " << (v1 - v2) << endl;
    cout << "  v1 - v3: " << (v1 - v3) << endl;
    cout << "  v2 - v1: " << (v2 - v1) << endl;
    cout << "  v2 - v2: " << (v2 - v2) << endl;
    cout << "  v2 - v3: " << (v2 - v3) << endl;
    cout << "  v3 - v1: " << (v3 - v1) << endl;
    cout << "  v3 - v2: " << (v3 - v2) << endl;
    cout << "  v3 - v3: " << (v3 - v3) << endl;
    
    // 7. Test getNorm
    
    cout << "Testing getNorm:" << endl;
    cout << "  v1.getNorm(): " << v1.getNorm() << endl;
    cout << "  v2.getNorm(): " << v2.getNorm() << endl;
    cout << "  v3.getNorm(): " << v3.getNorm() << endl;
    
    cout << endl;
    
    return 0;
}



//
//  Stream Insertion Operator
//
//  Purpose: To allow formatted Vector2Ints be be conveniantly
//           inserted into an output stream.  The Vector2Int is
//           formatted as a coordinate vector.
//  Parameter(s):
//    <1> out: A reference to the output stream
//    <2> vec: The Vector2Int to insert
//  Precondition(s): N/A
//  Returns: out
//  Side Effect: If out.good() is true, the values of vec are
//               inserted into out.  If out.good() is false, the
//               result is undefined.
//

ostream& operator<< (ostream& out, const Vector2Int& vec)
{
    out << "(" << vec.x << ", " << vec.y << ")";
    return out;
}
